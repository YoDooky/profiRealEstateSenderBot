import re
from telegram import aux_funcs, markups
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from excel_module import ExcelData
from database.models.utils import dbcontrol
from database.controllers import messages_controller
from config.bot_config import USERS_FILEPATH, USER_MESSAGES_GROUP_ID
from config.db_config import USERS_FOR_OFFER_TABLE


class DocumentItem(StatesGroup):
    waiting_for_user_choice = State()
    waiting_for_document = State()
    waiting_for_period = State()  # period between sending offers (sec)
    waiting_for_start_time = State()  # start time for sending offers
    waiting_for_sending_messages = State()


class UserMenu:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.offer_loop = aux_funcs.OfferLoop(bot)

    @staticmethod
    def check_auth(decorated_func):
        """Auth decorator"""

        def inner(*args, **kwargs):
            decorated_func(*args, **kwargs)

        return inner

    @staticmethod
    async def wait_for_task_complete(call: types.CallbackQuery, state: FSMContext):
        left_users = aux_funcs.check_current_task(USERS_FOR_OFFER_TABLE)
        keyboard = markups.get_continue_last_offer_menu()
        await call.message.edit_text(
            text=f'‚ö† –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –∑–∞–Ω—è—Ç —Ä–∞—Å—Å—ã–ª–∫–æ–π –æ—Ñ—Ñ–µ—Ä–æ–≤ {left_users} –æ—Å—Ç–∞–≤—à–∏–º—Å—è —é–∑–µ—Ä–∞–º\n'
                 f'–ù–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–ª–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", '
                 f'—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–µ–¥—ä–∏–¥—É—â—É—é —Ä–∞—Å—Å—ã–ª–∫—É',
            reply_markup=keyboard)

    @staticmethod
    async def check_task_exist(call: types.CallbackQuery, state: FSMContext):
        await state.finish()
        left_users = aux_funcs.check_current_task(USERS_FOR_OFFER_TABLE)
        if not left_users:
            keyboard = markups.get_approve_button(callback='choose_file')
            await call.message.edit_text(text='–ë–æ—Ç —Å–µ–π—á–∞—Å —Å–≤–æ–±–æ–¥–µ–Ω, –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" üßê', reply_markup=keyboard)
            return
        keyboard = markups.get_interrupt_current_task_menu()
        await call.message.edit_text(text=f'‚ö† –í —Ç–µ–∫—É—â–µ–º –∑–∞–¥–∞–Ω–∏–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ñ—Ñ–µ—Ä–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å {left_users} —é–∑–µ—Ä–æ–≤\n'
                                          f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å '
                                          f'–Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É?',
                                     reply_markup=keyboard)

    @staticmethod
    async def user_choice(call: types.CallbackQuery, state: FSMContext):
        await state.finish()
        # api_user_id = 5871658703
        # second_numb_id = 5936371531
        await call.message.edit_text(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ excel —Ñ–∞–π–ª —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ñ—Ñ–µ—Ä–æ–º üßê')
        await state.set_state(DocumentItem.waiting_for_document.state)

    async def begin_new_offer(self, message: types.Message, state: FSMContext):
        """Select document with users ID and offer text"""
        if not message.document.file_name.split('.')[-1] == 'xlsx':
            await message.answer(text='‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ xlsx')
            return
        await self.bot.download_file_by_id(message.document.file_id, USERS_FILEPATH)
        dbcontrol.clean_table(table=USERS_FOR_OFFER_TABLE)
        messages_controller.db_write_users_offer_data(table=USERS_FOR_OFFER_TABLE)  # write excel data to db
        await message.answer(text='üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)')
        await state.set_state(DocumentItem.waiting_for_period.state)

    @staticmethod
    async def continue_last_offer(call: types.CallbackQuery, state: FSMContext):
        await call.message.answer(text='üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)')
        # await state.set_state(DocumentItem.waiting_for_period.state)
        await state.set_state(DocumentItem.waiting_for_start_time.state)

    # @staticmethod
    # async def set_sending_offers_start_time(message: types.Message, state: FSMContext):
    #     """Selet time between sending message to another user"""
    #     if not re.findall(r'\d+', message.text):
    #         await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!')
    #         return
    #     await state.update_data(time_between_sending=message.text)
    #     await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh:mm (–ø—Ä–∏–º–µ—Ä: 9:00)')
    #     await state.set_state(DocumentItem.waiting_for_start_time.state)

    @staticmethod
    async def approve_start_sending_offers(message: types.Message, state: FSMContext):
        """Select start time for messaging"""
        if not re.findall(r'\d+', message.text):
            await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!')
            return
        await state.update_data(time_between_sending=message.text)
        # selected_time = aux_funcs.check_time_format(message.text)
        # if not selected_time:
        #     await message.answer(text='‚ùó –í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É hh:mm\n'
        #                               '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
        #     return
        # await state.update_data(start_sending_time=selected_time)
        # user_data = await state.get_data()
        keyboard = markups.get_start_messaging_menu()
        await message.answer(text=f'üïê –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏: –∫–∞–∂–¥—ã–µ {message.text} —Å–µ–∫—É–Ω–¥\n'
                                  f'‚ùï –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö',
                             reply_markup=keyboard)
        await state.set_state(DocumentItem.waiting_for_sending_messages.state)

    async def send_messages_to_users(self, call: types.CallbackQuery, state: FSMContext):
        """Send offer to users by ID"""
        excel_data = ExcelData(file_name='users')
        user_data = await state.get_data()
        sleep_time = user_data.get("time_between_sending")
        user_offer_data = {
            'users_offer_list': messages_controller.db_read_users_offer_data(table=USERS_FOR_OFFER_TABLE),
            'offer_text': excel_data.read_data_from_excel().offer_text,
            'sleep_time': sleep_time
        }
        await self.offer_loop.start(call, user_offer_data)

    async def stop_offer_loop(self, call: types.CallbackQuery):
        """Stops sending offers to users"""
        await self.offer_loop.stop()
        keyboard = markups.get_continue_send_offer_menu()
        await call.message.answer('üõë –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=keyboard)

    async def forward_user_message_to_group(self, message: types.Message):
        """Forwards messages from user to group"""
        user_message = message.text if not message.caption else message.caption
        caption_text = f'–∏–º—è: {message.from_user.first_name}\n' \
                       f'—é–∑–µ—Ä–Ω–µ–π–º: {message.from_user.mention}\n' \
                       f'—Ç–µ–∫—Å—Ç: {user_message}'
        try:
            photo_id = message.photo[-1].file_id
            await self.bot.send_photo(USER_MESSAGES_GROUP_ID, photo_id, caption=caption_text)
            return
        except Exception as ex:
            pass
        try:
            audio_id = message.voice.file_id
            await self.bot.send_voice(USER_MESSAGES_GROUP_ID, audio_id, caption=caption_text)
            return
        except Exception as ex:
            pass
        try:
            document_id = message.document.file_id
            await self.bot.send_document(USER_MESSAGES_GROUP_ID, document_id, caption=caption_text)
            return
        except Exception as ex:
            pass
        await self.bot.send_message(USER_MESSAGES_GROUP_ID, caption_text)

    def register_handlers(self, dp: Dispatcher):
        """Register handlers"""
        dp.register_callback_query_handler(self.check_task_exist, text='start_app', state='*')
        # dp.register_callback_query_handler(self.check_task_exist, text='cancel', state='*')

        dp.register_callback_query_handler(self.wait_for_task_complete, text='cancel_interrupt', state='*')

        dp.register_callback_query_handler(self.user_choice, text='choose_file', state='*')
        # dp.register_callback_query_handler(self.user_choice, text='cancel_start', state='*')
        # dp.register_callback_query_handler(self.user_choice, text='approve_interrupt', state='*')
        # dp.register_callback_query_handler(self.user_choice, text='cancel_offer', state='*')

        dp.register_message_handler(self.begin_new_offer, content_types=['document'],
                                    state=DocumentItem.waiting_for_document)

        dp.register_callback_query_handler(self.continue_last_offer, text='continue_last_offer', state='*')

        # dp.register_message_handler(self.set_sending_offers_start_time, content_types='text',
        #                             state=DocumentItem.waiting_for_period)

        dp.register_message_handler(self.approve_start_sending_offers, content_types='text',
                                    state=DocumentItem.waiting_for_start_time)

        dp.register_callback_query_handler(self.send_messages_to_users, text='approve_start',
                                           state=DocumentItem.waiting_for_sending_messages)
        # dp.register_callback_query_handler(self.send_messages_to_users, text='continue_offer',
        #                                    state=DocumentItem.waiting_for_sending_messages)

        dp.register_message_handler(self.forward_user_message_to_group,
                                    content_types=['document', 'text', 'photo', 'voice'], state='*')
        # dp.register_message_handler(self.send_messages_to_users, content_types='text',
        #                             state=DocumentItem.waiting_for_sending_messages)
        # dp.register_callback_query_handler(self.send_messages_to_users, text='approve',
        #                                    state=DocumentItem.waiting_for_sending_messages)

        # dp.register_callback_query_handler(start_loop, text='start_offer_loop')
        dp.register_callback_query_handler(self.stop_offer_loop, text='stop_offer_loop', state='*')
